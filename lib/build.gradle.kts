/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    checkstyle
    jacoco
    id("com.github.spotbugs") version "4.7.3"
    id("org.checkerframework") version "0.6.19"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

group = "com.rokoder.concurrency"
version = "1.0.0-snapshot"

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    implementation("com.github.spotbugs:spotbugs-annotations:4.7.3")
    implementation("com.rokoder.concurrency:context-preserved:1.0.0-snapshot")
    implementation("org.slf4j:slf4j-api:2.0.5")

    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.0")
    testImplementation("org.mockito:mockito-core:4.10.0")
    testImplementation("org.hamcrest:hamcrest:2.2")

    spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0")

    compileOnly("org.checkerframework:checker-qual:3.28.0")
    testCompileOnly("org.checkerframework:checker-qual:3.28.0")
    checkerFramework("org.checkerframework:checker:3.28.0")
}

checkstyle {
    toolVersion = "10.4"
    isIgnoreFailures = false // Added this so that the tasks fail if CheckStyle errors are present.
}

tasks.withType<Checkstyle>().configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            isEnabled = true
            limit {
                minimum = "0.5".toBigDecimal()
            }
        }
    }
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
    }

    doLast {
        print(reports.html.outputLocation.get().toString() + "/index.html")
    }
}

tasks.test {
    finalizedBy(
        tasks.jacocoTestReport,
        tasks.jacocoTestCoverageVerification
    ) // report is always generated after tests run
}

tasks.spotbugsTest {
    enabled = false
}

tasks.spotbugsMain {
    reports.create("html") {
        required.set(true)
    }
}

tasks.spotbugsTest {
    reports.create("html") {
        required.set(true)
    }
}

checkerFramework {
    checkers = listOf(
        "org.checkerframework.checker.nullness.NullnessChecker",
        "org.checkerframework.checker.optional.OptionalChecker",
        "org.checkerframework.common.value.ValueChecker"
    )
    excludeTests = true
    skipCheckerFramework = false
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
